
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mboost")
> 
> set.seed(290875)
> x <- rnorm(100)
> y <- rnorm(100)
> w <- drop(rmultinom(1, 100, rep(1 / 100, 100)))
> 
> G <- Gaussian()
> fm <- Family(ngradient = G@ngradient, risk = G@risk)
> 
> glmboost(y ~ x, family = G)

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, family = G)


	 Squared Error (Regression) 

Loss function: (y - f)^2 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  0.04741503 

Coefficients: 
 (Intercept)            x 
-0.002510456  0.018508330 
attr(,"offset")
[1] 0.04741503

> 
> glmboost(y ~ x, family = fm)

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, family = fm)


	 user-specified 

Loss function:  

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  0.04741503 

Coefficients: 
 (Intercept)            x 
-0.002510456  0.018508330 
attr(,"offset")
[1] 0.04741503

> 
> 
> x <- rnorm(100)
> y <- rnbinom(length(x), size = 2, mu = exp(x * 2))
> mod <- glmboost(y ~ x, family = NBinomial())
> mod[1000]

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, family = NBinomial())


	 Negative Negative-Binomial Likelihood 

Loss function:  

Number of boosting iterations: mstop = 1000 
Step size:  0.1 
Offset:  1.633160 

Coefficients: 
(Intercept)           x 
  -1.481156    1.912433 
attr(,"offset")
[1] 1.633160

> coef(mod)
(Intercept)           x 
  -1.481156    1.912433 
attr(,"offset")
[1] 1.633160
> nuisance(mod)
[1] 1.331289
> 
> ### QuantReg and ExpectReg
> gamboost(y ~ x, family = QuantReg())

	 Model-based Boosting

Call:
gamboost(formula = y ~ x, family = QuantReg())


	 Quantile Regression 

Loss function: tau * (y - f) * ((y - f) >= 0) - (1 - tau) * (y - f) * ((y -  
     f) < 0) 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  1 
Number of baselearners:  1 

> gamboost(y ~ x, family = ExpectReg())

	 Model-based Boosting

Call:
gamboost(formula = y ~ x, family = ExpectReg())


	 Expectile Regression 

Loss function: tau * (y - f)^2 * ((y - f) >= 0) + (1 - tau) * (y - f)^2 * ((y -  
     f) < 0) 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  5.12 
Number of baselearners:  1 

> 
> 
> if (require("MASS")) {
+ 
+ summary(glm.nb(y ~ x))
+ 
+ y <- cut(x, breaks = c(-Inf, quantile(x, prob = c(0.25, 0.5, 0.75)), Inf), ordered = TRUE)
+ x <- rnorm(100)
+ polr(y ~ x)
+ mod <- glmboost(y ~ x, family = PropOdds())
+ nuisance(mod) - attr(coef(mod), "offset")
+ coef(mod)
+ 
+ }
Loading required package: MASS
         x 
0.09113743 
attr(,"offset")
[1] -0.06195115
> 
> 
> ### Weibull model
> 
> if (require("survival")) {
+ 
+ rextrval <- function(x) log( -log(1-x) )
+ sigma <- 0.5
+ u <- runif(100)
+ u.1 <- runif(100)
+ w <- rextrval(u)
+ w.1 <- rextrval(u.1)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Weibull(),
+     control = boost_control(mstop=100))
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2)
+ coef(model2)
+ model2$scale
+ 
+ }
Loading required package: survival
Loading required package: splines
[1] 0.4493619
> 
> 
> ### Log logistic model
> 
> if (require("survival")) {
+ 
+ sigma <- 0.5
+ w <- rlogis(100)
+ w.1 <- rlogis(100)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Loglog(),
+     control = boost_control(mstop=200))
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2, dist="loglogistic")
+ coef(model2)
+ model2$scale
+ 
+ }
[1] 0.3857498
> 
> 
> ### Log normal model
> 
> if (require("survival")) {
+ 
+ sigma <- 0.5
+ w <- rnorm(100)
+ w.1 <- rnorm(100)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Lognormal(),
+     control = boost_control(mstop=200))
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2, dist="lognormal")
+ coef(model2)
+ model2$scale
+ 
+ }
[1] 0.6015273
> 
