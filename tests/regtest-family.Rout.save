
R version 2.14.0 (2011-10-31)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mboost")
> 
> set.seed(290875)
> x <- rnorm(100)
> y <- rnorm(100)
> w <- drop(rmultinom(1, 100, rep(1 / 100, 100)))
> 
> G <- Gaussian()
> fm <- Family(ngradient = G@ngradient, risk = G@risk)
> 
> glmboost(y ~ x, family = G)

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, family = G)


	 Squared Error (Regression) 

Loss function: (y - f)^2 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  0.04741503 

Coefficients: 
 (Intercept)            x 
-0.002576133  0.018571944 
attr(,"offset")
[1] 0.04741503

> 
> glmboost(y ~ x, family = fm)

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, family = fm)


	 user-specified 

Loss function:  

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  0.04741503 

Coefficients: 
 (Intercept)            x 
-0.002576133  0.018571944 
attr(,"offset")
[1] 0.04741503

> 
> 
> x <- rnorm(100)
> y <- rnbinom(length(x), size = 2, mu = exp(x * 2))
> mod <- glmboost(y ~ x, family = NBinomial(), center = FALSE)
> mod[1000]

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, center = FALSE, family = NBinomial())


	 Negative Negative-Binomial Likelihood 

Loss function:  

Number of boosting iterations: mstop = 1000 
Step size:  0.1 
Offset:  1.63316 

Coefficients: 
(Intercept)           x 
  -1.481156    1.912433 
attr(,"offset")
[1] 1.63316

> coef(mod)
(Intercept)           x 
  -1.481156    1.912433 
attr(,"offset")
[1] 1.63316
> nuisance(mod)
[1] 1.331289
> 
> ### QuantReg and ExpectReg
> gamboost(y ~ x, family = QuantReg())

	 Model-based Boosting

Call:
gamboost(formula = y ~ x, family = QuantReg())


	 Quantile Regression 

Loss function: tau * (y - f) * ((y - f) >= 0) - (1 - tau) * (y - f) * ((y -  
     f) < 0) 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  1 
Number of baselearners:  1 

> gamboost(y ~ x, family = ExpectReg())

	 Model-based Boosting

Call:
gamboost(formula = y ~ x, family = ExpectReg())


	 Expectile Regression 

Loss function: tau * (y - f)^2 * ((y - f) >= 0) + (1 - tau) * (y - f)^2 * ((y -  
     f) < 0) 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  5.12 
Number of baselearners:  1 

> 
> 
> if (require("MASS")) {
+ 
+ summary(glm.nb(y ~ x))
+ 
+ y <- cut(x, breaks = c(-Inf, quantile(x, prob = c(0.25, 0.5, 0.75)), Inf), ordered = TRUE)
+ x <- rnorm(100)
+ polr(y ~ x)
+ mod <- glmboost(y ~ x, family = PropOdds(), center = FALSE)
+ nuisance(mod) - attr(coef(mod), "offset")
+ coef(mod)
+ 
+ }
Loading required package: MASS
         x 
0.09113743 
attr(,"offset")
[1] -0.06195115
> 
> 
> ### Weibull model
> 
> if (require("survival")) {
+ 
+ rextrval <- function(x) log( -log(1-x) )
+ sigma <- 0.5
+ u <- runif(100)
+ u.1 <- runif(100)
+ w <- rextrval(u)
+ w.1 <- rextrval(u.1)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Weibull(),
+     control = boost_control(mstop=100), center = FALSE)
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2)
+ coef(model2)
+ model2$scale
+ 
+ }
Loading required package: survival
Loading required package: splines
[1] 0.4493619
> 
> 
> ### Log logistic model
> 
> if (require("survival")) {
+ 
+ sigma <- 0.5
+ w <- rlogis(100)
+ w.1 <- rlogis(100)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Loglog(),
+     control = boost_control(mstop=200), center = FALSE)
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2, dist="loglogistic")
+ coef(model2)
+ model2$scale
+ 
+ }
[1] 0.3857498
> 
> 
> ### Log normal model
> 
> if (require("survival")) {
+ 
+ sigma <- 0.5
+ w <- rnorm(100)
+ w.1 <- rnorm(100)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Lognormal(),
+     control = boost_control(mstop=200), center = FALSE)
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2, dist="lognormal")
+ coef(model2)
+ model2$scale
+ 
+ }
[1] 0.6015273
> 
> 
> ### AUC
> data("wpbc", package = "mboost")
> wpbc[,colnames(wpbc) != "status"] <- scale(wpbc[,colnames(wpbc) != "status"])
> wpbc <- wpbc[complete.cases(wpbc), colnames(wpbc) != "time"]
> mAUC <- gamboost(status ~ ., data = wpbc, family = AUC())
> 1 - mAUC$risk()
  [1] 0.5810811 0.7021152 0.7157756 0.7278202 0.7375147 0.7439777 0.7495593
  [8] 0.7570505 0.7629260 0.7705640 0.7739424 0.7774677 0.7817274 0.7871622
 [15] 0.7909812 0.7974442 0.8049354 0.8093420 0.8185958 0.8244712 0.8347532
 [22] 0.8378378 0.8398942 0.8454759 0.8500294 0.8567861 0.8591363 0.8631022
 [29] 0.8655993 0.8686839 0.8752938 0.8845476 0.8891011 0.8920388 0.9036428
 [36] 0.9102526 0.9108402 0.9155405 0.9237662 0.9363984 0.9383079 0.9459459
 [43] 0.9488837 0.9515276 0.9535840 0.9578437 0.9606345 0.9666569 0.9679788
 [50] 0.9693008 0.9710635 0.9712103 0.9731199 0.9720917 0.9729730 0.9723854
 [57] 0.9719448 0.9734136 0.9748825 0.9754700 0.9789953 0.9798766 0.9804642
 [64] 0.9781140 0.9788484 0.9809048 0.9814924 0.9816392 0.9825206 0.9836957
 [71] 0.9836957 0.9845770 0.9857521 0.9867803 0.9876616 0.9875147 0.9872209
 [78] 0.9876616 0.9886898 0.9894242 0.9903055 0.9908931 0.9913337 0.9910400
 [85] 0.9910400 0.9905993 0.9908931 0.9917744 0.9916275 0.9925088 0.9928026
 [92] 0.9928026 0.9928026 0.9941246 0.9945652 0.9951528 0.9952996 0.9955934
 [99] 0.9955934 0.9963278
> 
> 
