
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mboost")
Loading required package: parallel
This is mboost 2.2-0.
  See NEWS for a complete list of changes.
  Note: The default for the computation of the degrees of freedom has been changed!

> 
> set.seed(290875)
> x <- rnorm(100)
> y <- rnorm(100)
> w <- drop(rmultinom(1, 100, rep(1 / 100, 100)))
> 
> G <- Gaussian()
> fm <- Family(ngradient = G@ngradient, risk = G@risk)
> 
> glmboost(y ~ x, family = G)

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, family = G)


	 Squared Error (Regression) 

Loss function: (y - f)^2 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  0.04741503 

Coefficients: 
 (Intercept)            x 
-0.002576133  0.018571944 
attr(,"offset")
[1] 0.04741503

> 
> glmboost(y ~ x, family = fm)

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, family = fm)


	 user-specified 

Loss function:  

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  0.04741503 

Coefficients: 
 (Intercept)            x 
-0.002576133  0.018571944 
attr(,"offset")
[1] 0.04741503

> 
> 
> x <- rnorm(100)
> y <- rnbinom(length(x), size = 2, mu = exp(x * 2))
> mod <- glmboost(y ~ x, family = NBinomial(), center = FALSE)
> mod[1000]

	 Generalized Linear Models Fitted via Gradient Boosting

Call:
glmboost.formula(formula = y ~ x, center = FALSE, family = NBinomial())


	 Negative Negative-Binomial Likelihood 

Loss function:  

Number of boosting iterations: mstop = 1000 
Step size:  0.1 
Offset:  1.63316 

Coefficients: 
(Intercept)           x 
  -1.481156    1.912433 
attr(,"offset")
[1] 1.63316

> coef(mod)
(Intercept)           x 
  -1.481156    1.912433 
attr(,"offset")
[1] 1.63316
> nuisance(mod)
[1] 1.331289
> 
> ### QuantReg and ExpectReg
> gamboost(y ~ x, family = QuantReg())

	 Model-based Boosting

Call:
gamboost(formula = y ~ x, family = QuantReg())


	 Quantile Regression 

Loss function: tau * (y - f) * ((y - f) >= 0) - (1 - tau) * (y - f) * ((y -  
     f) < 0) 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  1 
Number of baselearners:  1 

> gamboost(y ~ x, family = ExpectReg())

	 Model-based Boosting

Call:
gamboost(formula = y ~ x, family = ExpectReg())


	 Expectile Regression 

Loss function: tau * (y - f)^2 * ((y - f) >= 0) + (1 - tau) * (y - f)^2 * ((y -  
     f) < 0) 
 

Number of boosting iterations: mstop = 100 
Step size:  0.1 
Offset:  5.12 
Number of baselearners:  1 

> 
> 
> if (require("MASS")) {
+ 
+ summary(glm.nb(y ~ x))
+ 
+ y <- cut(x, breaks = c(-Inf, quantile(x, prob = c(0.25, 0.5, 0.75)), Inf), ordered = TRUE)
+ x <- rnorm(100)
+ polr(y ~ x)
+ mod <- glmboost(y ~ x, family = PropOdds(), center = FALSE)
+ nuisance(mod) - attr(coef(mod), "offset")
+ coef(mod)
+ 
+ }
Loading required package: MASS
         x 
0.09113743 
attr(,"offset")
[1] -0.06195115
> 
> 
> ### Weibull model
> 
> if (require("survival")) {
+ 
+ rextrval <- function(x) log( -log(1-x) )
+ sigma <- 0.5
+ u <- runif(100)
+ u.1 <- runif(100)
+ w <- rextrval(u)
+ w.1 <- rextrval(u.1)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Weibull(),
+     control = boost_control(mstop=100), center = FALSE)
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2)
+ coef(model2)
+ model2$scale
+ 
+ }
Loading required package: survival
Loading required package: splines
[1] 0.4493619
> 
> 
> ### Log logistic model
> 
> if (require("survival")) {
+ 
+ sigma <- 0.5
+ w <- rlogis(100)
+ w.1 <- rlogis(100)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Loglog(),
+     control = boost_control(mstop=200), center = FALSE)
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2, dist="loglogistic")
+ coef(model2)
+ model2$scale
+ 
+ }
[1] 0.3857498
> 
> 
> ### Log normal model
> 
> if (require("survival")) {
+ 
+ sigma <- 0.5
+ w <- rnorm(100)
+ w.1 <- rnorm(100)
+ 
+ x1 <- rnorm(100,sd=1)
+ x2 <- x1 + rnorm(100,sd=1)
+ x1.1 <- rnorm(100,sd=1)
+ x2.1 <- x1.1 + rnorm(100,sd=1)
+ X <- cbind(x1,x2)
+ X.1 <- cbind(x1.1,x2.1)
+ beta <- c(1,0.5)
+ survtime <- exp(X%*%beta + sigma*w)
+ censtime <- exp(X.1%*%beta + sigma*w.1)
+ event <- survtime < censtime
+ stime <- pmin(survtime,censtime)
+ 
+ model1 <- glmboost(Surv(stime,event)~x1+x2, family=Lognormal(),
+     control = boost_control(mstop=200), center = FALSE)
+ coef(model1)
+ nuisance(model1)
+ model2 <- survreg(Surv(stime,event)~x1+x2, dist="lognormal")
+ coef(model2)
+ model2$scale
+ 
+ }
[1] 0.6015273
> 
> 
> ### AUC
> data("wpbc", package = "mboost")
> wpbc[,colnames(wpbc) != "status"] <- scale(wpbc[,colnames(wpbc) != "status"])
> wpbc <- wpbc[complete.cases(wpbc), colnames(wpbc) != "time"]
> mAUC <- gamboost(status ~ ., data = wpbc, family = AUC())
> 1 - mAUC$risk()
  [1] 0.5779965 0.7027027 0.7151880 0.7303173 0.7426557 0.7488249 0.7573443
  [8] 0.7643948 0.7658637 0.7720329 0.7786428 0.7812867 0.7837838 0.7899530
 [15] 0.7917156 0.7934783 0.7965629 0.7993537 0.8019976 0.8049354 0.8080200
 [22] 0.8102233 0.8130141 0.8178613 0.8197709 0.8235899 0.8300529 0.8332844
 [29] 0.8344595 0.8398942 0.8418038 0.8445946 0.8479730 0.8478261 0.8523796
 [36] 0.8531140 0.8608989 0.8633960 0.8658931 0.8689777 0.8744125 0.8776439
 [43] 0.8852820 0.8889542 0.8936545 0.8977673 0.9055523 0.9079025 0.9098120
 [50] 0.9130435 0.9196533 0.9249412 0.9237662 0.9253819 0.9303760 0.9353702
 [57] 0.9409518 0.9418331 0.9469741 0.9450646 0.9480024 0.9509401 0.9543184
 [64] 0.9513807 0.9537309 0.9575499 0.9568155 0.9599001 0.9600470 0.9610752
 [71] 0.9616627 0.9618096 0.9622503 0.9644536 0.9654818 0.9650411 0.9675382
 [78] 0.9681257 0.9681257 0.9681257 0.9710635 0.9731199 0.9715041 0.9726792
 [85] 0.9729730 0.9751763 0.9759107 0.9767920 0.9763514 0.9767920 0.9778202
 [92] 0.9781140 0.9787015 0.9785546 0.9787015 0.9785546 0.9791422 0.9788484
 [99] 0.9792891 0.9795828
> 
> 
> # rank-based boosting
> 
> if (require("survival")) {
+ 
+ set.seed(1907)
+ n <- 100
+ beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
+ p <- length(beta)
+ x <- matrix(rnorm(n*p), n, p)
+ yt <- x %*% beta + rnorm(n)
+ x <- cbind(1, x)
+ colnames(x) <- c("intercept", paste("x", 1:8, sep=""))
+ cens <- runif(n, 0, 6)
+ y <- exp(pmin(yt, cens))
+ del <- yt <= cens
+ ## check fitting and cvrisk
+ mod <- glmboost(x = x, y = Surv(y, del),
+                 control = boost_control(mstop = 500, nu = 0.1),
+                 center = TRUE,
+                 family = Gehan())
+ coef(mod)
+ plot(mod$risk())
+ cvr <- cvrisk(mod, folds = cv(model.weights(mod), "kfold"), papply=lapply)
+ plot(cvr)
+ ## check weighting:
+ wMat <- cv(rep(1, n), type = "kfold",B = 2)
+ modWeighted <- glmboost(x = x, y = Surv(y, del), weights = wMat[, 1],
+                         control = boost_control(mstop = 300, nu = 0.20),
+                         family = Gehan())
+ # same model with data set subseted:
+ modSubset <- glmboost(x = x[as.logical(wMat[, 1]),],
+                       y = Surv(y, del)[as.logical(wMat[, 1]),],
+                       control = boost_control(mstop = 300, nu = 0.20),
+                       family = Gehan())
+ ## <FIXME> there are still some minor discrepancies. Perhaps this is due to
+ ## different pre-processing? </FIXME>
+ round(coef(modWeighted) - coef(modSubset), 3)
+ }
intercept        x1        x2        x3        x4        x5        x6        x7 
   -0.169     0.002     0.000     0.000    -0.002     0.001     0.000    -0.004 
       x8 
   -0.005 
attr(,"offset")
[1] 353.4646
> 
> proc.time()
   user  system elapsed 
 22.025   0.108  22.186 
