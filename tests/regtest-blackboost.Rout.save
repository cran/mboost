
R version 2.5.0 Under development (unstable) (2007-02-26 r40806)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> require("mboost")
Loading required package: mboost
Loading required package: modeltools
Loading required package: stats4
Loading required package: party
Loading required package: survival
Loading required package: splines

Attaching package: 'survival'


	The following object(s) are masked from package:modeltools :

	 cluster 

Loading required package: grid
Loading required package: coin
Loading required package: mvtnorm
Loading required package: zoo

Attaching package: 'zoo'


	The following object(s) are masked from package:base :

	 rapply 

Loading required package: sandwich
Loading required package: strucchange
Loading required package: vcd
Loading required package: MASS
Loading required package: colorspace
[1] TRUE
> 
> set.seed(290875)
> 
> tst <- try(data("BostonHousing", package = "mlbench"))
> if (!inherits(tst, "try-error")) {
+ 
+     system.time(a <- blackboost(medv ~ ., data = BostonHousing, 
+         tree_controls = ctree_control(teststat = "max", 
+                                 testtype = "Teststatistic",
+                                 mincriterion = 0,
+                                 maxdepth = 2),
+         control = boost_control(mstop = 500)))
+ 
+     print(ae <- mean((predict(a) - BostonHousing$medv)^2))
+ 
+     pdiffs <- max(abs(predict(a$update(a$data, a$control, a$weights)) - predict(a)))
+     stopifnot(pdiffs < sqrt(.Machine$double.eps))
+ 
+ 
+     ### attach `gbm', quietly
+     sink("tmpfile")
+     require("gbm")
+     sink()
+     file.remove("tmpfile")
+ 
+     if (require("gbm")) {
+         system.time(b <- gbm(medv ~ ., data = BostonHousing, 
+             n.trees = 500, interaction = 2, distribution = "gaussian", 
+             shrinkage = 0.1, bag = 1))
+     print(be <- mean((predict(b, newdata = BostonHousing, n.trees = 500) - 
+                 BostonHousing$medv)^2))
+     plot(BostonHousing$medv, predict(a), col = "red", pch = "+")
+     points(BostonHousing$medv, 
+            predict(b, newdata = BostonHousing, n.trees = 500), 
+            col = "blue", pch = "+")
+     stopifnot(ae < be)
+     }
+ }
[1] 2.579433
Loading required package: gbm
Loading required package: lattice
Loading required package: mgcv
Iter   TrainDeviance   ValidDeviance   StepSize   Improve
     1       74.4121             nan     0.1000       nan
     2       65.6474             nan     0.1000       nan
     3       58.7034             nan     0.1000       nan
     4       52.6088             nan     0.1000       nan
     5       47.5788             nan     0.1000       nan
     6       43.1559             nan     0.1000       nan
     7       39.3997             nan     0.1000       nan
     8       35.9511             nan     0.1000       nan
     9       33.1632             nan     0.1000       nan
    10       30.6850             nan     0.1000       nan
   100        6.8694             nan     0.1000       nan
   200        5.0890             nan     0.1000       nan
   300        3.9605             nan     0.1000       nan
   400        3.2681             nan     0.1000       nan
   500        2.7537             nan     0.1000       nan

[1] 2.753747
There were 28 warnings (use warnings() to see them)
> 
> ### check different interfaces
> data("iris")
> x <- as.matrix(iris[,colnames(iris) != "Species"])
> y <- iris$Species
> p1 <- predict(blackboost(x = x, y = y), newdata = x)
> p2 <- predict(blackboost(Species ~ ., data = iris), newdata = iris)
> stopifnot(identical(abs(max(p1 - p2)), 0))
> 
> 
> 
